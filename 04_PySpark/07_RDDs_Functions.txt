
RDD_Functions: 
cache, collect, countByValue, distinct, filter, foreach, 
persist, sample, toDebugString, count, unpersist, union.

1. countByValue:
a = sc.parallelize([1,2,3,5,2,5,2,5,3,6,8,5,4,2,4,1,5,2,6,3,6,2,5,1,4,2,])
a.countByValue()
o/p: defaultdict(int, {1: 3, 2: 7, 3: 3, 5: 6, 6: 3, 8: 1, 4: 3})

2. Creating pair RDDs:
#Creating pair RDDs:
rdd = sc.parallelize([("a1","b1","c1","d1","e1"),("a2","b2","c2","d2","e2")])
result = rdd.map(lambda x:(x[0],list(x[1:])))
result.collect()
o/p: [('a1', ['b1', 'c1', 'd1', 'e1']), ('a2', ['b2', 'c2', 'd2', 'e2'])]

3. Transformations on paired RDDs:
a) 
from operator import add
#Trasformations on paired RDDs:
r = sc.parallelize([(1,2),(3,4),(3,6),(3,5),(2,3)])
r.reduceByKey(add).collect()
o/p: [(1, 2), (3, 15), (2, 3)]

b) mapValues:
r = sc.parallelize([(1,2),(3,4),(3,6),(3,5),(2,3)])
r.mapValues(lambda x:x+1).collect()
o/p:[(1, 3), (3, 5), (3, 7), (3, 6), (2, 4)]

c) flatMapValues:
r = sc.parallelize([(1,2),(3,4),(3,6),(3,5),(2,3)])
r.flatMapValues(lambda x:range(x,5)).collect()
o/p: [(1, 2), (1, 3), (1, 4), (3, 4), (2, 3), (2, 4)]

d) Keys:
r.keys().collect()
o/p: [1, 3, 3, 3, 2]

e) sortByKey:
r.sortByKey().collect()
o/p: [(1, 2), (2, 3), (3, 4), (3, 6), (3, 5)]

f) subtractByKey:
r1 = sc.parallelize([(1,2),(3,4),(3,6),(6,5),(2,3)])
r2 = sc.parallelize([(1,2),(3,2),(3,6),(3,3),(8,3)])
r1.subtractByKey(r2).collect()
o/p: [(6, 5), (2, 3)]

g) join: no idea how its working:
r1 = sc.parallelize([(6,5),(2,3)])
r2 = sc.parallelize([(1,2),(3,2),(3,6),(2,8)])
r1.join(r2).sortByKey().collect()
o/p: [(2, (3, 8))]

h) rightOuterJoin:
r1 = sc.parallelize([(6,5),(2,3),(3,8)])
r2 = sc.parallelize([(1,2),(3,2),(3,6)])
r1.rightOuterJoin(r2).collect()
o/p: [(3, (8, 2)), (3, (8, 6)), (1, (None, 2))]

i) leftOuterJoin:
r1 = sc.parallelize([(6,5),(2,3),(3,8)])
r2 = sc.parallelize([(1,2),(3,2),(3,6)])
r1.leftOuterJoin(r2).collect()
o/p: [(6, (5, None)), (2, (3, None)), (3, (8, 2)), (3, (8, 6))]

========================================================================












